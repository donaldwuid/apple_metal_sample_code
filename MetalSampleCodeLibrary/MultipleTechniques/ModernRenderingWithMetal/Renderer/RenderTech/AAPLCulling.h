/*
See LICENSE folder for this sampleâ€™s licensing information.

Abstract:
Header for class which performs cullong of a scene's objects using the GPU
*/

#import <Metal/Metal.h>
#import "AAPLConfig.h"

@class AAPLMesh;
@class AAPLCamera;

// Options for types of culling to apply.
typedef NS_ENUM(uint32_t, AAPLRenderCullType)
{
    AAPLRenderCullTypeNone          = 0,
    AAPLRenderCullTypeFrustum       = 1,
    AAPLRenderCullTypeFrustumDepth  = 2,
    AAPLRenderCullTypeCount         = 3,
    AAPLRenderCullTypeVisualization = AAPLRenderCullTypeFrustumDepth | 0x10000,
};

struct AAPLFrameViewData;

struct AAPLICBData
{
    // Default indirect command buffers.
    _Nonnull id <MTLIndirectCommandBuffer>   commandBuffer;
    _Nonnull id <MTLIndirectCommandBuffer>   commandBuffer_alphaMask;
    _Nonnull id <MTLIndirectCommandBuffer>   commandBuffer_transparent;
    // Indirect command buffers for depth only rendering which has fewer buffers.
    _Nonnull id <MTLIndirectCommandBuffer>   commandBuffer_depthOnly;
    _Nonnull id <MTLIndirectCommandBuffer>   commandBuffer_depthOnly_alphaMask;
    // Buffer to store the execution range for the ICB.
    _Nonnull id <MTLBuffer>                  executionRangeBuffer;
    // Buffer containing a AAPLEncodeArguments argument buffer.
    _Nonnull id <MTLBuffer>                  icbEncodeArgsBuffer;
    _Nonnull id <MTLBuffer>                  icbEncodeArgsBuffer_alphaMask;
    _Nonnull id <MTLBuffer>                  icbEncodeArgsBuffer_transparent;
    // Output buffer for chunk visualization.
    _Nonnull id <MTLBuffer>                  chunkVizBuffer;
};

// Encapsulates the state for culling meshes or chunks.
@interface AAPLCulling : NSObject

// Initializes this culling object, allocating compute pipelines and argument encoders.
- (nonnull instancetype)initWithDevice:(nonnull id<MTLDevice>)device
                               library:(nonnull id<MTLLibrary>)library
                  useRasterizationRate:(BOOL)useRasterizationRate
        genCSMUsingVertexAmplification:(BOOL)genCSMUsingVertexAmplification;

- (void)rebuildPipelinesWithLibrary:(nonnull id<MTLLibrary>)library
               useRasterizationRate:(BOOL)useRasterizationRate
     genCSMUsingVertexAmplification:(BOOL)genCSMUsingVertexAmplification;

// Initializes `AAPLICBData` argument buffers for rendering the results of
//  culling for a specific mesh.
- (void)initCommandData:(AAPLICBData &)commandData
                forMesh:(nonnull AAPLMesh *)mesh
               chunkViz:(BOOL)chunkViz
              frameData:(nonnull id<MTLBuffer>)frameData
   globalTexturesBuffer:(nonnull id<MTLBuffer>)globalTexturesBuffer
      lightParamsBuffer:(nonnull id<MTLBuffer>)lightParamsBuffer;

// Executes the culling for `AAPLRenderModeIndirect` render mode on GPU with depth texture
//  and depth pyramid.
- (void)executeCulling:(AAPLICBData&)commandData
         frameViewData:(AAPLFrameViewData&)frameViewData
       frameDataBuffer:(nonnull id<MTLBuffer>)frameDataBuffer
              cullMode:(AAPLRenderCullType)cullMode
        pyramidTexture:(nonnull id<MTLTexture>)pyramidTexture
              mainPass:(BOOL)mainPass
             depthOnly:(BOOL)depthOnly
                  mesh:(nonnull AAPLMesh *)mesh
        materialBuffer:(nonnull id<MTLBuffer>)materialBuffer
                rrData:(nullable id<MTLBuffer>)rrMapData
             onEncoder:(nonnull id<MTLComputeCommandEncoder>)encoder;

#if SUPPORT_CSM_GENERATION_WITH_VERTEX_AMPLIFICATION
- (void)executeCullingFiltered:(AAPLICBData&)commandData
                frameViewData1:(AAPLFrameViewData&)frameViewData1
                frameViewData2:(AAPLFrameViewData&)frameViewData2
               frameDataBuffer:(nonnull id<MTLBuffer>)frameDataBuffer
                      cullMode:(AAPLRenderCullType)cullMode
               pyramidTexture1:(nonnull id<MTLTexture>)pyramidTexture1
               pyramidTexture2:(nonnull id<MTLTexture>)pyramidTexture2
                          mesh:(nonnull AAPLMesh *)mesh
                materialBuffer:(nonnull id<MTLBuffer>)materialBuffer
                     onEncoder:(nonnull id<MTLComputeCommandEncoder>)encoder;

#endif

// Clears the indirect command buffer generated by the culling phase.
- (void)resetIndirectCommandBuffersForViews:(nonnull AAPLICBData*)commandData
                                  viewCount:(NSUInteger)viewCount
                                   mainPass:(BOOL)mainPass
                                  depthOnly:(BOOL)depthOnly
                                       mesh:(nonnull AAPLMesh *)mesh
                            onCommandBuffer:(nonnull id <MTLCommandBuffer>)commandBuffer;

// Optimizes the contents of the indirect command buffer generated by the culling phase.
- (void)optimizeIndirectCommandBuffersForViews:(nonnull AAPLICBData*)commandData
                                     viewCount:(NSUInteger)viewCount
                                      mainPass:(BOOL)mainPass
                                     depthOnly:(BOOL)depthOnly
                                          mesh:(nonnull AAPLMesh *)mesh
                               onCommandBuffer:(nonnull id <MTLCommandBuffer>)commandBuffer;

@end
